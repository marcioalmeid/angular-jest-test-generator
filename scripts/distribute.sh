#!/bin/bash

# Script para criar pacote de distribui√ß√£o completo
# Uso: ./scripts/distribute.sh [vers√£o] [output-directory]

set -e

VERSION=${1:-$(node -p "require('./package.json').version")}
OUTPUT_DIR=${2:-"./dist"}

echo "üì¶ Criando pacote de distribui√ß√£o..."
echo ""

# Verifica se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Erro: Execute este script na raiz do projeto"
    exit 1
fi

# Cria estrutura de diret√≥rios
DIST_PATH="$OUTPUT_DIR/angular-jest-test-generator-$VERSION"
mkdir -p "$DIST_PATH"

echo "üìã Vers√£o: $VERSION"
echo "üìÅ Destino: $DIST_PATH"
echo ""

# Cria tarball
echo "1Ô∏è‚É£  Criando tarball..."
./scripts/create-tarball.sh "$DIST_PATH"

# Copia documenta√ß√£o
echo "2Ô∏è‚É£  Copiando documenta√ß√£o..."
cp README.md "$DIST_PATH/"
cp LOCAL_INSTALL.md "$DIST_PATH/"
cp INSTALL.md "$DIST_PATH/"
cp LICENSE "$DIST_PATH/" 2>/dev/null || echo "   ‚ö†Ô∏è  LICENSE n√£o encontrado"

# Cria README de distribui√ß√£o
echo "3Ô∏è‚É£  Criando README de distribui√ß√£o..."
cat > "$DIST_PATH/README-DISTRIBUICAO.md" << EOF
# Angular Jest Test Generator - v$VERSION

## üì¶ Instala√ß√£o

### Op√ß√£o 1: Instalar do tarball (Recomendado)

\`\`\`bash
npm install ./angular-tools-jest-test-generator-$VERSION.tgz
\`\`\`

### Op√ß√£o 2: Extrair e instalar do diret√≥rio

\`\`\`bash
# Extrair tarball (se necess√°rio)
tar -xzf angular-tools-jest-test-generator-$VERSION.tgz

# Instalar do diret√≥rio
npm install ./package
\`\`\`

## üöÄ Uso R√°pido

\`\`\`bash
# Gerar teste para um arquivo
npx ng-test-gen src/app/seu-arquivo.ts

# Gerar testes para diret√≥rio
npx ng-test-gen src/app --all
\`\`\`

## üìö Documenta√ß√£o

- **README.md** - Documenta√ß√£o completa do projeto
- **LOCAL_INSTALL.md** - Guia de instala√ß√£o local detalhado
- **INSTALL.md** - Guia de instala√ß√£o e configura√ß√£o

## üÜò Suporte

Se tiver problemas, consulte LOCAL_INSTALL.md se√ß√£o "Troubleshooting".

---

Distribu√≠do em: $(date +"%Y-%m-%d %H:%M:%S")
EOF

# Cria script de instala√ß√£o r√°pida
echo "4Ô∏è‚É£  Criando script de instala√ß√£o r√°pida..."
cat > "$DIST_PATH/quick-install.sh" << 'EOF'
#!/bin/bash
set -e

echo "üöÄ Instala√ß√£o R√°pida - Angular Jest Test Generator"
echo ""

# Encontra o tarball
TARBALL=$(ls -t *.tgz | head -n1)

if [ -z "$TARBALL" ]; then
    echo "‚ùå Tarball n√£o encontrado!"
    exit 1
fi

echo "üì¶ Tarball encontrado: $TARBALL"
echo ""

# Pergunta o caminho do projeto
read -p "üìÅ Caminho do projeto Angular: " PROJECT_PATH

if [ ! -d "$PROJECT_PATH" ]; then
    echo "‚ùå Diret√≥rio n√£o encontrado!"
    exit 1
fi

echo ""
echo "üì¶ Instalando..."
cd "$PROJECT_PATH"
npm install "$OLDPWD/$TARBALL"

echo ""
echo "‚úÖ Instala√ß√£o conclu√≠da!"
echo ""
echo "üöÄ Para usar:"
echo "   npx ng-test-gen src/app/seu-arquivo.ts"
echo ""
EOF
chmod +x "$DIST_PATH/quick-install.sh"

# Cria arquivo de checksum
echo "5Ô∏è‚É£  Criando checksums..."
cd "$DIST_PATH"
sha256sum *.tgz > checksums.txt 2>/dev/null || shasum -a 256 *.tgz > checksums.txt
cd - > /dev/null

# Cria arquivo ZIP para distribui√ß√£o f√°cil
echo "6Ô∏è‚É£  Criando arquivo ZIP..."
cd "$OUTPUT_DIR"
ZIP_NAME="angular-jest-test-generator-$VERSION.zip"
zip -r "$ZIP_NAME" "angular-jest-test-generator-$VERSION" > /dev/null
cd - > /dev/null

echo ""
echo "‚úÖ Pacote de distribui√ß√£o criado com sucesso!"
echo ""
echo "üì¶ Conte√∫do:"
echo "   ‚úì Tarball npm"
echo "   ‚úì Documenta√ß√£o completa"
echo "   ‚úì Script de instala√ß√£o r√°pida"
echo "   ‚úì Checksums"
echo "   ‚úì Arquivo ZIP"
echo ""
echo "üìÅ Localiza√ß√£o:"
echo "   Diret√≥rio: $DIST_PATH"
echo "   ZIP: $OUTPUT_DIR/$ZIP_NAME"
echo ""
echo "üì§ Tamanhos:"
echo "   Tarball: $(du -h "$DIST_PATH"/*.tgz | cut -f1)"
echo "   ZIP total: $(du -h "$OUTPUT_DIR/$ZIP_NAME" | cut -f1)"
echo ""
echo "üì§ Para distribuir:"
echo "   1. Compartilhe o ZIP: $OUTPUT_DIR/$ZIP_NAME"
echo "   2. Ou apenas o tarball: $DIST_PATH/*.tgz"
echo ""
echo "üìù Instru√ß√µes para instala√ß√£o:"
echo "   Inclu√≠das em: $DIST_PATH/README-DISTRIBUICAO.md"
echo ""

